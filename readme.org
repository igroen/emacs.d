#+STARTUP: overview
#+PROPERTY: header-args :tangle init.el

* Init
** Startup tweaks
   Make startup faster by reducing the frequency of garbage collection.

   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold (* 500 1024 1024)
           gc-cons-percentage 0.6)
   #+END_SRC

   After Emacs startup has been completed, set `gc-cons-threshold' to
   16 MB and reset `gc-cons-percentage' to its original value.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-startup-hook
               '(lambda ()
                  (setq gc-cons-threshold (* 16 1024 1024)
                        gc-cons-percentage 0.1)))
   #+END_SRC
** Package management
   Setup package management with use-package and quelpa

   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (setq package-enable-at-startup nil)

     ;; Packages to install
     (defvar package-list '(use-package))

     ;; Set the repository locations
     (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
     (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))

     ;; Activate all the packages (in particular autoloads)
     (package-initialize)

     ;; Fetch the list of packages available
     (unless package-archive-contents
       (package-refresh-contents))

     ;; Install the missing packages
     (dolist (package package-list)
       (unless (package-installed-p package)
         (package-install package)))

     ;; Enable use-package and friends
     (eval-when-compile
       (require 'use-package))

     ;; :diminish keyword
     (use-package diminish
       :ensure t)

     ;; :bind keyword
     (use-package bind-key
       :ensure t)

     ;; :quelpa keyword
     (use-package quelpa
       :ensure t

       :defer t

       :custom
       ;; Don't update melpa on Emacs startup
       (quelpa-update-melpa-p nil))

     (use-package quelpa-use-package
       :ensure t)

     ;; :chords keyword
     (use-package use-package-chords
       :ensure t

       :config (key-chord-mode 1))
   #+END_SRC
** Debug
*** Startup time
    Log Emacs startup time in *Messages*

    #+BEGIN_SRC emacs-lisp
      (add-hook 'emacs-startup-hook
                '(lambda ()
                   (message (format "Emacs startup time: %s" (emacs-init-time)))))
    #+END_SRC
*** Benchmarks
    Benchmark your Emacs initialization

    #+BEGIN_SRC emacs-lisp
      (use-package benchmark-init
        :ensure t

        :config
        ;; To disable collection of benchmark data after init is done.
        (add-hook 'after-init-hook 'benchmark-init/deactivate))
    #+END_SRC
* Defaults
** Username & Email
   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Iwan in 't Groen"
           user-login-name "iwan"
           user-mail-address "iwanintgroen@gmail.com"
           smtpmail-smtp-user user-mail-address)
   #+END_SRC
** Screen setup
   #+BEGIN_SRC emacs-lisp
     ;; Start with empty buffer
     (setq inhibit-startup-message t)

     ;; Disable bell
     (setq ring-bell-function 'ignore)

     ;; Disable menubar
     (menu-bar-mode -1)

     ;; Disable toolbar
     (tool-bar-mode -1)

     ;; Disable scrollbars
     (dolist (mode '(menu-bar-mode tool-bar-mode scroll-bar-mode))
       (when (fboundp mode) (funcall mode -1)))

     ;; Show the current column in the mode line
     (setq column-number-mode t)

     ;; Maximize Emacs on init
     (toggle-frame-maximized)

     ;; Set theme
     (load-theme 'leuven)
   #+END_SRC
** Encoding
   #+BEGIN_SRC emacs-lisp
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
   #+END_SRC
** Editing
   #+BEGIN_SRC emacs-lisp
     ;; Highlight the current line
     (global-hl-line-mode t)

     ;; Remove trailing whitespace on save
     (add-hook 'before-save-hook 'delete-trailing-whitespace)

     ;; Auto close bracket insertion.
     (electric-pair-mode 1)

     ;; Show corresponding paren
     (show-paren-mode 1)

     ;; Require a newline at the end of the file
     (defvar require-final-newline t)

     ;; Set indentation to always use spaces
     (setq-default indent-tabs-mode nil)
   #+END_SRC
** Scrolling
   #+BEGIN_SRC emacs-lisp
     (setq scroll-margin                   0  ;; Default
           scroll-step                     1
           scroll-conservatively           10000
           scroll-preserve-screen-position 1)
   #+END_SRC
** Tramp
   Set remote password prompts

   #+BEGIN_SRC emacs-lisp
     (customize-set-variable
      'tramp-password-prompt-regexp
      (concat
       "^.*"
       (regexp-opt
        '("passphrase"
          "Passphrase"
          "password"
          "Password"
          ;; Google Authenticator
          "Verification code")
        t)
       ".*:\0? *"))
   #+END_SRC
** Tweaks
*** Add interactive command to elfeed.org file
    #+BEGIN_SRC emacs-lisp
      (global-set-key
       (kbd "C-c f")
       (lambda ()
         (interactive)
         (find-file-other-window "~/Sync/org/elfeed.org")))
    #+END_SRC
*** Add interactive command to readme.org file
    #+BEGIN_SRC emacs-lisp
      (global-set-key
       (kbd "C-c s")
       (lambda ()
         (interactive)
         (find-file-other-window (expand-file-name "readme.org" user-emacs-directory))))
    #+END_SRC
*** Autorefresh buffers on file change
    #+BEGIN_SRC emacs-lisp
      (global-auto-revert-mode t)
    #+END_SRC
*** Enable y/n answers
    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
*** Remember cursor position
    #+BEGIN_SRC emacs-lisp
      (save-place-mode 1)
    #+END_SRC
*** Replace *Buffer List* with *Ibuffer*
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x C-b") 'ibuffer)
    #+END_SRC
** Backups
   #+BEGIN_SRC emacs-lisp
     ;; Store all backup and autosave files in the backups dir
     (setq auto-save-list-file-prefix nil)
     (setq backup-directory-alist
           `(("." . ,(concat user-emacs-directory "backups"))))

     ;; Use version contral and keep multiple backup files
     (setq delete-old-versions t
       kept-new-versions 6
       kept-old-versions 2
       version-control t)
   #+END_SRC
** Customize
   Move lines added by the customize system to a seperate file.
   Config changes made through the customize UI will be stored here.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC
* Packages
** Ace window
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t

       :bind ([remap other-window] . ace-window))
   #+END_SRC
** Avy
   Jump to things in Emacs tree-style

   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t

       :chords
       ("jj" . avy-goto-char)
       ("jk" . avy-goto-word-1)
       ("jl" . avy-goto-line))
   #+END_SRC
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t

       :diminish company-mode

       :hook (after-init . global-company-mode))
   #+END_SRC
** Counsel/Ivy/Swiper
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t

       :bind
       ("M-x" . counsel-M-x)
       ("C-x C-f" . counsel-find-file)
       ("M-y" . counsel-yank-pop))

     (use-package ivy :demand
       :ensure t

       :diminish ivy-mode

       :bind ("<f6>" . ivy-resume)

       :init
       (setq ivy-use-virtual-buffers t
             ivy-count-format "%d/%d "
             ivy-initial-inputs-alist nil)

       :config
       (ivy-mode 1))

     (use-package swiper
       :ensure t

       :bind
       ([remap isearch-forward]  . swiper)
       ([remap isearch-backward] . swiper))
   #+END_SRC
** Diminish only
   #+BEGIN_SRC emacs-lisp
     (use-package abbrev
       :diminish abbrev-mode)

     (use-package eldoc
       :diminish eldoc-mode)

     (use-package flymake
       :diminish flymake-mode)
   #+END_SRC
** Dired
   #+BEGIN_SRC emacs-lisp
     (use-package dired-x
       :init (setq-default dired-omit-files-p t)

       ;; Hide dot files in dired omit-mode (C-x M-o)
       :config (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$")))
   #+END_SRC
** Drag stuff
   #+BEGIN_SRC emacs-lisp
     (use-package drag-stuff
       :ensure t

       :bind (("M-p" . drag-stuff-up)
              ("M-n" . drag-stuff-down))

       :config (drag-stuff-global-mode 1))
   #+END_SRC
** Dumb jump
   #+begin_src emacs-lisp
     (use-package dumb-jump
       :ensure t

       :after hydra

       :bind (("M-g j" . dumb-jump-go)
              ("M-g o" . dumb-jump-go-other-window)
              ("M-g i" . dumb-jump-go-prompt)
              ("M-g e" . dumb-jump-go-prefer-external)
              ("M-g x" . dumb-jump-go-prefer-external-other-window)
              ("M-g l" . dumb-jump-quick-look)
              ("M-g b" . dumb-jump-back)
              ("M-g ?" . dumb-jump-hydra/body))

       :init
       (defhydra dumb-jump-hydra (:color blue :columns 3)
         "Dumb Jump"
         ("j" dumb-jump-go "Go")
         ("o" dumb-jump-go-other-window "Go other window")
         ("i" dumb-jump-go-prompt "Prompt")
         ("e" dumb-jump-go-prefer-external "Go external")
         ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
         ("l" dumb-jump-quick-look "Quick look")
         ("b" dumb-jump-back "Back"))

       :config (setq dumb-jump-selector 'ivy))
   #+end_src
** Elfeed
   #+BEGIN_SRC emacs-lisp
     (use-package elfeed
       :ensure t

       :bind
       ("C-c w" . elfeed))

     (use-package elfeed-org
       :ensure t

       :init
       (setq rmh-elfeed-org-files (list "~/Sync/org/elfeed.org"))

       :config
       (elfeed-org))

     (use-package elfeed-goodies
       :ensure t

       :config
       (elfeed-goodies/setup))
   #+END_SRC
** Exec path from shell
   Make *GUI Emacs* use the proper $PATH and avoid a [[http://www.flycheck.org/en/latest/user/troubleshooting.html#flycheck-cant-find-any-programs-in-gui-emacs-on-macos][common setup issue on MacOS]].
   Without this package packages such as flycheck and EPA are not working correctly.

   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :ensure t

       :config
       (when (memq window-system '(mac ns x))
         (exec-path-from-shell-initialize)))
   #+END_SRC
** Expand region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t

       :bind ("C-x w" . er/expand-region))
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t

       :diminish flycheck-mode

       :hook (after-init . global-flycheck-mode))
   #+END_SRC
** Git
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t

       :bind ("C-x g" . magit-status))

     (use-package git-timemachine
       :ensure t)

     (use-package git-gutter
       :ensure t

       :diminish git-gutter-mode

       :config (global-git-gutter-mode t))

     (use-package gist
       :ensure t

       :defer t

       ;; Ask for gist description when creating gist
       :init (setq gist-ask-for-description t))
   #+END_SRC
** GnuPG
   #+BEGIN_SRC emacs-lisp
     (use-package epa
       :init
       ;; Prefer armored ASCII
       (setq epa-armor t)
       ;; Prompt for the password in the minibuffer
       (setq epa-pinentry-mode 'loopback))
   #+END_SRC
** Hydra
   #+begin_src emacs-lisp
     (use-package hydra
       :ensure t)
   #+end_src
** Multiple cursors
   #+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
      :ensure t

      :bind (("C-x C-m C-e" . mc/edit-lines)
             ("C-x C-m C-n" . mc/mark-next-like-this)
             ("C-x C-m C-p" . mc/mark-previous-like-this)
             ("C-x C-m C-a" . mc/mark-all-like-this)))
   #+END_SRC
** Power line
   #+BEGIN_SRC emacs-lisp
     (use-package powerline
       :ensure t

       :config (powerline-default-theme))
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t

       :diminish projectile-mode

       :bind-keymap ("C-c p" . projectile-command-map)

       :init
       (setq projectile-enable-caching t)

       :config
       ;; Enable projectile globally
       (projectile-mode))

     (use-package counsel-projectile
       :ensure t

       :hook (after-init . counsel-projectile-mode))
   #+END_SRC
** Treemacs
*** treemacs
    #+BEGIN_SRC emacs-lisp
      (use-package treemacs
        :ensure t

        :bind (("M-0"       . treemacs-select-window)
               ("C-x t 1"   . treemacs-delete-other-windows)
               ("C-x t t"   . treemacs)
               ("C-x t B"   . treemacs-bookmark)
               ("C-x t C-t" . treemacs-find-file)
               ("C-x t M-t" . treemacs-find-tag))

        :config (treemacs-git-mode 'simple))
    #+END_SRC
*** treemacs-projectile
    #+begin_src emacs-lisp
      (use-package treemacs-projectile
        :ensure t

        :after (treemacs projectile))
    #+end_src
*** treemacs-icons-dired
    #+begin_src emacs-lisp
      (use-package treemacs-icons-dired
        :ensure t

        :after (treemacs dired)

        :config (treemacs-icons-dired-mode))
    #+end_src
*** treemacs-magit
    #+begin_src emacs-lisp
      (use-package treemacs-magit
        :ensure t

        :after (treemacs magit))
    #+end_src
** Try
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC
** Which key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t

       :diminish which-key-mode

       :config (which-key-mode))
   #+END_SRC
** XClip
   #+BEGIN_SRC emacs-lisp
    (use-package xclip
      :ensure t

      ;; Enable xclip-mode to use the system clipboard when killing/yanking
      ;; Install xclip on Linux for this to work. On OSX pbcopy/pbpaste will be used
      :config (xclip-mode t))
   #+END_SRC
** YASnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet-snippets
       :ensure t

       :defer t

       :diminish yas-minor-mode

       :config (yas-global-mode))
   #+END_SRC
* Org mode
** Org
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure org-plus-contrib

       :bind (("C-c a" . org-agenda)
              ("C-c c" . org-capture)
              ("C-c l" . org-store-link))

       :init
       ;; Show time when done
       (setq org-log-done t)

       ;; Folder to look for agenda files
       (setq org-agenda-files '("~/Sync/org"))

       ;; Log quick notes (C-c C-z) into LOGBOOK drawer
       (setq org-log-into-drawer t)

       ;; Syntax highlighting for org-mode
       (setq org-src-fontify-natively t)

       :config
       ;; Add languages for the ‘src’ code blocks in org-mode
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
          (shell . t)
          (python . t))))
   #+END_SRC
** Org bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t

       :hook (org-mode lambda () (org-bullets-mode t)))
   #+END_SRC
** Org tempo
   Expansion of templates
   #+BEGIN_SRC emacs-lisp
     (use-package org-tempo)
   #+END_SRC
* Programming
** C++ setup
*** rtags
    #+BEGIN_SRC emacs-lisp
      (use-package rtags
        :ensure t

        :diminish rtags-mode

        :init
        (setq rtags-completions-enabled t)

        :config
        (rtags-enable-standard-keybindings))
    #+END_SRC
*** company-rtags
    #+BEGIN_SRC emacs-lisp
      (use-package company-rtags
        :ensure t)
    #+END_SRC
*** company-irony-c-headers
    #+BEGIN_SRC emacs-lisp
      (use-package company-irony-c-headers
        :ensure t

        :diminish company-mode)
    #+END_SRC
*** company-irony
    #+BEGIN_SRC emacs-lisp
      (use-package company-irony
        :ensure t

        :disabled  ;; Using rtags

        :diminish company-mode)
    #+END_SRC
*** Irony
    #+BEGIN_SRC emacs-lisp
      (use-package irony
        :ensure t

        ;; :after company

        :diminish irony-mode

        ;; Use irony-mode for c-hooks
        :hook ((c++-mode . irony-mode)
               (c-mode . irony-mode)
               (objc-mode . irony-mode))

        :init
        (setq-default c-basic-offset 4)

        :config
        (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
        (add-hook 'irony-mode-hook 'irony-eldoc)
        (add-hook 'flycheck-mode-hook 'flycheck-irony-setup)

        ;; company-irony and company-rtags are both completion backends.
        ;; When using both of them together duplicate completions are shown.
        ;; So use one of these completions backends but not both of them.
        (add-to-list 'company-backends '(;;company-irony
                                         company-irony-c-headers
                                         company-rtags))
        (cmake-ide-setup))
    #+END_SRC
*** irony-eldoc
    #+BEGIN_SRC emacs-lisp
      (use-package irony-eldoc
        :ensure t

        :diminish eldoc-mode)
    #+END_SRC
*** flycheck-irony
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-irony
        :ensure t

        :diminish flycheck-mode)
    #+END_SRC
*** cmake-mode
    #+BEGIN_SRC emacs-lisp
      (use-package cmake-mode
        :ensure t)
    #+END_SRC
*** cmake-ide
    #+BEGIN_SRC emacs-lisp
      (use-package cmake-ide
        :ensure t

        :init
        (setq cmake-ide-build-dir "cmake_build"))
    #+END_SRC
** Python setup
*** Elpy
    #+BEGIN_SRC emacs-lisp
      (use-package elpy
        :ensure t

        :diminish elpy-mode

        :hook ((python-mode . elpy-mode)
               ;; (before-save . elpy-black-fix-code)
               )

        :init
        ;; Don't print evaluated code fragments in the python shell
        ;; https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-shell-echo-input
        (setq elpy-shell-echo-input nil)

        :config
        (elpy-enable))
    #+END_SRC
*** py-autopep8
    #+BEGIN_SRC emacs-lisp
      (use-package py-autopep8
        :ensure t

        :disabled

        :after elpy

        :hook (elpy-mode . py-autopep8-enable-on-save))
    #+END_SRC
*** py-isort
    #+BEGIN_SRC emacs-lisp
      (use-package py-isort
        :ensure t

        :disabled

        :after elpy

        :hook (before-save . py-isort-before-save))
    #+END_SRC
*** auto-virtualenvwrapper
    #+BEGIN_SRC emacs-lisp
      (use-package auto-virtualenvwrapper
        :ensure t

        :config
        (add-hook 'projectile-after-switch-project-hook #'auto-virtualenvwrapper-activate))
    #+END_SRC
* Snippets
** Comment/Uncomment line or region
   #+BEGIN_SRC emacs-lisp
     (defun comment-or-uncomment-region-or-line ()
       "Comments or uncomments the region or the current line if there's no active region."
       (interactive)
       (let (beg end)
         (if (region-active-p)
           (setq beg (region-beginning) end (region-end))
           (setq beg (line-beginning-position) end (line-end-position)))
         (comment-or-uncomment-region beg end)))
     (global-set-key (kbd "C-x C-\\") 'comment-or-uncomment-region-or-line)
   #+END_SRC
** Delete current file and buffer
   #+BEGIN_SRC emacs-lisp
     (defun xah-delete-current-file-copy-to-kill-ring ()
       "Delete current buffer/file and close the buffer, push content to `kill-ring'.
     URL `http://ergoemacs.org/emacs/elisp_delete-current-file.html'
     Version 2016-07-20"
       (interactive)
       (progn
         (kill-new (buffer-string))
         (message "Buffer content copied to kill-ring.")
         (when (buffer-file-name)
           (when (file-exists-p (buffer-file-name))
             (progn
               (delete-file (buffer-file-name))
               (message "Deleted file: 「%s」." (buffer-file-name)))))
         (let ((buffer-offer-save nil))
           (set-buffer-modified-p nil)
           (kill-buffer (current-buffer)))))
     (global-set-key (kbd "C-c k")  'xah-delete-current-file-copy-to-kill-ring)
   #+END_SRC
** Duplicate current line
   #+begin_src emacs-lisp
     (defun duplicate-line ()
        (interactive)
        (let ((col (current-column)))
          (move-beginning-of-line 1)
          (kill-line)
          (yank)
          (newline)
          (yank)
          (move-to-column col)))

      (global-set-key (kbd "C-c d") 'duplicate-line)
   #+end_src
** Smarter move to beginning of line
   #+BEGIN_SRC emacs-lisp
     (defun smarter-move-beginning-of-line (arg)
       "Move point back to indentation of beginning of line.

     Move point to the first non-whitespace character on this line.
     If point is already there, move to the beginning of the line.
     Effectively toggle between the first non-whitespace character and
     the beginning of the line.

     If ARG is not nil or 1, move forward ARG - 1 lines first.  If
     point reaches the beginning or end of the buffer, stop there."
       (interactive "^p")
       (setq arg (or arg 1))

       ;; Move lines first
       (when (/= arg 1)
         (let ((line-move-visual nil))
           (forward-line (1- arg))))

       (let ((orig-point (point)))
         (back-to-indentation)
         (when (= orig-point (point))
           (move-beginning-of-line 1))))

     ;; remap C-a to `smarter-move-beginning-of-line'
     (global-set-key [remap move-beginning-of-line]
                     'smarter-move-beginning-of-line)
   #+END_SRC
* Tangle on save
  When opening this file for the first time the following warning is shown:
  "The local variables list in init.org contains values that may not be safe (*)".

  - Press 'y' to continue.
  - Next run `org-babel-tangle` (C-c C-v t) to create init.el.
  - Restart emacs or use 'C-x load-file <enter> init.el'
  - The next time this warning is shown press '!' to prevent future warnings.

  #+BEGIN_SRC emacs-lisp
    ;; Local Variables:
    ;; eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
    ;; End:
  #+END_SRC
