#+STARTUP: overview
#+PROPERTY: header-args :tangle init.el

* Init
** Startup tweaks
   Make startup faster by reducing the frequency of garbage collection.

   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold (* 512 1024 1024)
           gc-cons-percentage 0.6)
   #+END_SRC

   After Emacs startup has been completed, set `gc-cons-threshold' to
   16 MB and reset `gc-cons-percentage' to its original value.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-startup-hook
               '(lambda ()
                  (setq gc-cons-threshold (* 16 1024 1024)
                        gc-cons-percentage 0.1)))
   #+END_SRC
** Package management
   Setup package management with straight.el and use-package.

   #+BEGIN_SRC emacs-lisp
     ;; Use develop branch
     (setq straight-repository-branch "develop")

     (defvar bootstrap-version)

     (let ((bootstrap-file
            (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
           (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
              'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))

     (straight-use-package 'use-package)

     (use-package diminish
       :straight t)

     (use-package bind-key
       :straight t)
   #+END_SRC
* Defaults
** Screen setup
*** Start with empty buffer
    #+BEGIN_SRC emacs-lisp
      (setq inhibit-startup-message t)
    #+END_SRC
*** Disable bell
    #+BEGIN_SRC emacs-lisp
      (setq ring-bell-function 'ignore)
    #+END_SRC
*** Disable menubar, toolbar and scrollbars
    #+BEGIN_SRC emacs-lisp
      (dolist (mode '(menu-bar-mode tool-bar-mode scroll-bar-mode))
        (when (fboundp mode) (funcall mode -1)))
    #+END_SRC
*** Show the current column in the mode line
    #+BEGIN_SRC emacs-lisp
      (setq column-number-mode t)
    #+END_SRC
*** Maximize Emacs on init
    #+BEGIN_SRC emacs-lisp
      (toggle-frame-maximized)
    #+END_SRC
*** Set theme
    #+BEGIN_SRC emacs-lisp
      (load-theme 'leuven)
    #+END_SRC
** Editing
*** Highlight the current line
    #+BEGIN_SRC emacs-lisp
      (global-hl-line-mode t)
    #+END_SRC
*** Remove trailing whitespace on save
    #+BEGIN_SRC emacs-lisp
      (add-hook 'before-save-hook 'delete-trailing-whitespace)
    #+END_SRC
*** Auto close bracket insertion
    #+BEGIN_SRC emacs-lisp
      (electric-pair-mode 1)
    #+END_SRC
*** Show corresponding paren
    #+BEGIN_SRC emacs-lisp
      (show-paren-mode 1)
    #+END_SRC
*** Require a newline at the end of the file
    #+BEGIN_SRC emacs-lisp
      (defvar require-final-newline t)
    #+END_SRC
*** Set indentation to always use spaces
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC
** Scrolling
   #+BEGIN_SRC emacs-lisp
     (setq scroll-margin                   0  ;; Default
           scroll-step                     1
           scroll-conservatively           10000
           scroll-preserve-screen-position 1)
   #+END_SRC
** Tramp
   Set remote password prompts.

   #+BEGIN_SRC emacs-lisp
     (customize-set-variable
      'tramp-password-prompt-regexp
      (concat
       "^.*"
       (regexp-opt
        '("passphrase"
          "Passphrase"
          "password"
          "Password"
          ;; Google Authenticator
          "Verification code")
        t)
       ".*:\0? *"))
   #+END_SRC
** Tweaks
*** Add interactive command to readme.org file
    #+BEGIN_SRC emacs-lisp
      (global-set-key
       (kbd "C-c s")
       (lambda ()
         (interactive)
         (find-file-other-window (expand-file-name "readme.org" user-emacs-directory))))
    #+END_SRC
*** Autorefresh buffers on file change
    #+BEGIN_SRC emacs-lisp
      (global-auto-revert-mode t)
    #+END_SRC
*** Enable y/n answers
    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
*** Remember cursor position
    #+BEGIN_SRC emacs-lisp
      (save-place-mode 1)
    #+END_SRC
*** Replace *Buffer List* with *Ibuffer*
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x C-b") 'ibuffer)
    #+END_SRC
*** Enable windmove
    Enable windmove default keybindings for easier switching between windows.

    #+begin_src emacs-lisp
      (windmove-default-keybindings)
    #+end_src
** Backups
   Store all backup and autosave files in the 'backups' dir.

   #+BEGIN_SRC emacs-lisp
     (setq auto-save-list-file-prefix nil)
     (setq backup-directory-alist
           `(("." . ,(concat user-emacs-directory "backups"))))
   #+END_SRC
   Use version contral and keep multiple backup files.

   #+BEGIN_SRC emacs-lisp
     (setq backup-by-copying t
           delete-old-versions t
           kept-new-versions 10
           kept-old-versions 0
           version-control t
           vc-make-backup-files t)
   #+END_SRC
** Customize
   Move lines added by the customize system to a seperate file.
   Config changes made through the customize UI will be stored here.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC
* Packages
** Ace window
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :straight t

       :bind ([remap other-window] . ace-window))
   #+END_SRC
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :straight t

       :diminish company-mode

       :hook (after-init . global-company-mode))
   #+END_SRC
** Ivy/Counsel/Swiper
*** Ivy
    Completion framework.

    #+BEGIN_SRC emacs-lisp
      (use-package ivy :demand
        :straight t

        :diminish ivy-mode

        :bind ("<f6>" . ivy-resume)

        :config
        (setq ivy-count-format "%d/%d "
              ivy-use-selectable-prompt t
              ivy-use-virtual-buffers t)
        (ivy-mode 1))
    #+END_SRC
*** Ivy-xref
    Select from xref candidates with ivy.

    #+BEGIN_SRC emacs-lisp
      (use-package ivy-xref
        :straight t
        :init
        ;; xref initialization is different in Emacs 27 - there are two different
        ;; variables which can be set rather than just one
        (when (>= emacs-major-version 27)
          (setq xref-show-definitions-function #'ivy-xref-show-defs))
        ;; Necessary in Emacs <27. In Emacs 27 it will affect all xref-based
        ;; commands other than xref-find-definitions (e.g. project-find-regexp)
        ;; as well
        (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))
   #+END_SRC
*** Counsel
    Provides some useful commands for ivy.

    #+BEGIN_SRC emacs-lisp
      (use-package counsel
        :straight t

        :bind
        ("M-x" . counsel-M-x)
        ("C-x C-f" . counsel-find-file)
        ("M-y" . counsel-yank-pop))
    #+END_SRC
*** Swiper
    Search through the current buffer.

    #+BEGIN_SRC emacs-lisp
      (use-package swiper
        :straight t

        :bind
        ([remap isearch-forward]  . swiper)
        ([remap isearch-backward] . swiper))
    #+END_SRC
*** Flx
    Better fuzzy matching.

    #+BEGIN_SRC emacs-lisp
      (use-package flx
        :straight t)
    #+END_SRC
*** Smex
    Show recently and most frequently used commands.

    #+BEGIN_SRC emacs-lisp
      (use-package smex
        :straight t)
    #+END_SRC
*** Wgrep
    Edit a grep buffer and apply those changes to the file buffer.

    #+BEGIN_SRC emacs-lisp
      (use-package wgrep
        :straight t)
    #+END_SRC
** Deft
   #+BEGIN_SRC emacs-lisp
     (use-package deft
       :straight t

       :bind ("<f8>" . deft)

       :commands (deft)

       :config
       (setq deft-default-extension "org"))
   #+END_SRC
** Diminish only
   #+BEGIN_SRC emacs-lisp
     (use-package abbrev
       :diminish abbrev-mode)

     (use-package eldoc
       :diminish eldoc-mode)
   #+END_SRC
** Dired
   #+BEGIN_SRC emacs-lisp
     (use-package dired
       :config
       ;; Use dired-x to enable C-x C-j (dired-jump) and other features
       (use-package dired-x)

       ;; Omit files starting with a dot
       (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))

       ;; Default omit files
       (setq-default dired-omit-mode t)

       ;; Make dired open in the same window when using RET or ^
       (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
       (define-key dired-mode-map (kbd "^")
         (lambda () (interactive) (find-alternate-file "..")))
       (put 'dired-find-alternate-file 'disabled nil))
   #+END_SRC
** Drag stuff
   #+BEGIN_SRC emacs-lisp
     (use-package drag-stuff
       :straight t

       :bind (("M-p" . drag-stuff-up)
              ("M-n" . drag-stuff-down))

       :config (drag-stuff-global-mode 1))
   #+END_SRC
** Dumb jump
   #+begin_src emacs-lisp
     (use-package dumb-jump
       :straight t

       :config
       (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate))
   #+end_src
** Exec path from shell
   Make *GUI Emacs* use the proper $PATH and avoid a [[http://www.flycheck.org/en/latest/user/troubleshooting.html#flycheck-cant-find-any-programs-in-gui-emacs-on-macos][common setup issue on MacOS]].
   Without this package packages such as flycheck and EPA are not working correctly.

   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :straight t

       :config
       (when (memq window-system '(mac ns x))
         (exec-path-from-shell-initialize)))
   #+END_SRC
** Expand region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :straight t

       :bind ("C-x w" . er/expand-region))
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :straight t

       :diminish flycheck-mode

       :hook (after-init . global-flycheck-mode))
   #+END_SRC
** Git
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :straight t

       :bind ("C-x g" . magit-status))

     (use-package git-timemachine
       :straight t)

     (use-package gist
       :straight t

       :config
       (setq gist-ask-for-description t))

     (use-package diff-hl
       :straight t

       :hook ((magit-post-refresh . diff-hl-magit-post-refresh)
              (dired-mode . diff-hl-dired-mode-unless-remote))

       :init
       (global-diff-hl-mode)

       :config
       (diff-hl-margin-mode)
       (diff-hl-flydiff-mode))
   #+END_SRC
** GnuPG
   #+BEGIN_SRC emacs-lisp
     (use-package epa
       :config
       ;; Prefer armored ASCII (.asc)
       (setq epa-armor t)

       ;; Open .asc files in the same way as .gpg files
       (setq epa-file-name-regexp "\\.\\(gpg\\|asc\\)$")
       (epa-file-name-regexp-update)

       ;; Prompt for the password in the minibuffer
       (setq epa-pinentry-mode 'loopback))
   #+END_SRC
** Hydra
   #+begin_src emacs-lisp
     (use-package hydra
       :straight t)
   #+end_src
** Multiple cursors
   #+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
      :straight t

      :bind (("C-x C-m C-e" . mc/edit-lines)
             ("C-x C-m C-n" . mc/mark-next-like-this)
             ("C-x C-m C-p" . mc/mark-previous-like-this)
             ("C-x C-m C-a" . mc/mark-all-like-this)))
   #+END_SRC
** Org mode
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :config
       ;; Add languages for `SRC` code blocks in org-mode
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
          (shell . t)
          (python . t))))
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :straight t

       :diminish projectile-mode

       :bind-keymap ("C-c p" . projectile-command-map)

       :config
       (setq projectile-enable-caching t)
       ;; Enable projectile globally
       (projectile-mode))

     (use-package counsel-projectile
       :straight t

       :hook (after-init . counsel-projectile-mode))
   #+END_SRC
** Treemacs
*** treemacs
    #+BEGIN_SRC emacs-lisp
      (use-package treemacs
        :straight t

        :bind (("M-0"       . treemacs-select-window)
               ("C-x t 1"   . treemacs-delete-other-windows)
               ("C-x t t"   . treemacs)
               ("C-x t B"   . treemacs-bookmark)
               ("C-x t C-t" . treemacs-find-file)
               ("C-x t M-t" . treemacs-find-tag))

        :config
        (treemacs-git-mode 'simple)

        (defun treemacs-ignore (filename absolute-path)
          (or (seq-contains '("__pycache__" "build" "dist" "venv") filename)
              (string-match "^.+\\.egg-info$" filename)
              (string-match "^.+\\.pyc$" filename)))

        (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore))
    #+END_SRC
*** treemacs-projectile
    #+begin_src emacs-lisp
      (use-package treemacs-projectile
        :straight t

        :after treemacs projectile)
    #+end_src
*** treemacs-icons-dired
    #+begin_src emacs-lisp
      (use-package treemacs-icons-dired
        :straight t

        :after treemacs dired

        :config (treemacs-icons-dired-mode))
    #+end_src
*** treemacs-magit
    #+begin_src emacs-lisp
      (use-package treemacs-magit
        :straight t

        :after treemacs magit)
    #+end_src
** VTerm
*** vterm
    #+BEGIN_SRC emacs-lisp
      (use-package vterm
        :straight t

        :init
        (setq vterm-always-compile-module t)

        :config
        (setq vterm-kill-buffer-on-exit t)
        (setq vterm-clear-scrollback-when-clearing t))
    #+END_SRC
*** vterm-toggle
    #+BEGIN_SRC emacs-lisp
      (use-package vterm-toggle
        :straight t

        :bind (("C-c , RET" . vterm)
               ("C-c , /" . vterm-toggle)
               ("C-c , p" . vterm-toggle-forward)
               ("C-c , n" . vterm-toggle-backward)
               ("C-c , ." . vterm-toggle-insert-cd)))
    #+END_SRC
** Which key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :straight t

       :diminish which-key-mode

       :config (which-key-mode))
   #+END_SRC
** XClip
   Enable xclip-mode to use the system clipboard when killing/yanking.
   Install xclip on Linux for this to work. On OSX pbcopy/pbpaste will be used.

   #+BEGIN_SRC emacs-lisp
     (use-package xclip
       :straight t

       :config (xclip-mode t))
   #+END_SRC
** YAML
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :straight t)
   #+END_SRC
* Programming
** C++ setup
*** rtags
    #+BEGIN_SRC emacs-lisp
      (use-package rtags
        :straight t

        :diminish rtags-mode

        :config
        (setq rtags-path (expand-file-name "straight/repos/rtags" straight-base-dir))
        (setq rtags-completions-enabled t)

        (rtags-enable-standard-keybindings))
    #+END_SRC
*** company-rtags
    #+BEGIN_SRC emacs-lisp
      (use-package company-rtags
        :straight t
        :config
        (add-to-list 'company-backends 'company-rtags))
    #+END_SRC
*** company-irony-c-headers
    #+BEGIN_SRC emacs-lisp
      (use-package company-irony-c-headers
        :straight t
        :config
        (add-to-list 'company-backends 'company-irony-c-headers))
    #+END_SRC
*** Irony
    To compile Irony on MacOS add '-DCMAKE_PREFIX_PATH=/usr/local/opt/llvm'
    to the irony-install-server make command.

    https://github.com/Sarcasm/irony-mode/pull/539#issuecomment-504792763

    #+BEGIN_SRC emacs-lisp
      (use-package irony
        :straight t

        :diminish irony-mode

        ;; Use irony-mode for c-hooks
        :hook ((c++-mode . irony-mode)
               (c-mode . irony-mode)
               (objc-mode . irony-mode))

        :init
        (setq-default c-basic-offset 4)

        :config
        (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
        (add-hook 'irony-mode-hook 'irony-eldoc)
        (add-hook 'flycheck-mode-hook 'flycheck-irony-setup))
    #+END_SRC
*** irony-eldoc
    #+BEGIN_SRC emacs-lisp
      (use-package irony-eldoc
        :straight t

        :diminish eldoc-mode)
    #+END_SRC
*** flycheck-irony
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-irony
        :straight t

        :diminish flycheck-mode)
    #+END_SRC
*** cmake-mode
    #+BEGIN_SRC emacs-lisp
      (use-package cmake-mode
        :straight t)
    #+END_SRC
*** cmake-ide
    #+BEGIN_SRC emacs-lisp
      (use-package cmake-ide
        :straight t

        :config
        (cmake-ide-setup)
        (setq cmake-ide-build-dir "cmake_build"))
    #+END_SRC
** Lisp setup
*** Slime
    #+BEGIN_SRC emacs-lisp
      (use-package slime
        :straight t

        :config
        (setq inferior-lisp-program "sbcl")
        (setq slime-contribs '(slime-asdf
                               slime-fancy
                               slime-quicklisp)))
    #+END_SRC
*** Paredit
    #+BEGIN_SRC emacs-lisp
      (use-package paredit
        :straight t

        :diminish paredit-mode

        :hook ((emacs-lisp-mode . paredit-mode)
               (eval-expression-minibuffer-setup . paredit-mode)
               (ielm-mode . paredit-mode)
               (lisp-mode . paredit-mode)
               (lisp-interaction-mode . paredit-mode)
               (common-lisp-mode . paredit-mode)
               (slime-repl-mode . paredit-mode)))
    #+END_SRC
** Python setup
*** Elpy
    #+BEGIN_SRC emacs-lisp
      (use-package elpy
        :straight t

        :diminish elpy-mode

        :config
        (elpy-enable)

        ;; Don't print evaluated code fragments in the python shell
        ;; https://elpy.readthedocs.io/en/latest/ide.html#option-elpy-shell-echo-input
        (setq elpy-shell-echo-input nil))
    #+END_SRC
*** py-isort
    #+BEGIN_SRC emacs-lisp
      (use-package py-isort
        :straight t)
    #+END_SRC
*** auto-virtualenvwrapper
    #+BEGIN_SRC emacs-lisp
      (use-package auto-virtualenvwrapper
        :straight t

        :config
        (add-hook 'projectile-after-switch-project-hook #'auto-virtualenvwrapper-activate))
    #+END_SRC
* Snippets
** Comment/Uncomment line or region
   #+BEGIN_SRC emacs-lisp
     (defun comment-or-uncomment-region-or-line ()
       "Comments or uncomments the region or the current line if there's no active region."
       (interactive)
       (let (beg end)
         (if (region-active-p)
           (setq beg (region-beginning) end (region-end))
           (setq beg (line-beginning-position) end (line-end-position)))
         (comment-or-uncomment-region beg end)))
     (global-set-key (kbd "C-x C-\\") 'comment-or-uncomment-region-or-line)
   #+END_SRC
** Delete current file and buffer
   #+BEGIN_SRC emacs-lisp
     (defun delete-current-file-copy-to-kill-ring ()
       "Delete current buffer/file and close the buffer, push content to `kill-ring'."
       (interactive)
       (progn
         (kill-new (buffer-string))
         (message "Buffer content copied to kill-ring.")
         (when (buffer-file-name)
           (when (file-exists-p (buffer-file-name))
             (progn
               (delete-file (buffer-file-name))
               (message "Deleted file: 「%s」." (buffer-file-name)))))
         (let ((buffer-offer-save nil))
           (set-buffer-modified-p nil)
           (kill-buffer (current-buffer)))))

     (global-set-key (kbd "C-c k")  'delete-current-file-copy-to-kill-ring)
   #+END_SRC
** Duplicate current line
   #+begin_src emacs-lisp
     (defun duplicate-line ()
        (interactive)
        (let ((col (current-column)))
          (move-beginning-of-line 1)
          (kill-line)
          (yank)
          (newline)
          (yank)
          (move-to-column col)))

      (global-set-key (kbd "C-c d") 'duplicate-line)
   #+end_src
** Smarter move to beginning of line
   Move point back to indentation of beginning of line.

   Move point to the first non-whitespace character on this line.
   If point is already there, move to the beginning of the line.
   Effectively toggle between the first non-whitespace character and
   the beginning of the line.

   If ARG is not nil or 1, move forward ARG - 1 lines first.  If
   point reaches the beginning or end of the buffer, stop there.
   #+BEGIN_SRC emacs-lisp
     (defun smarter-move-beginning-of-line (arg)
       (interactive "^p")
       (setq arg (or arg 1))

       ;; Move lines first
       (when (/= arg 1)
         (let ((line-move-visual nil))
           (forward-line (1- arg))))

       (let ((orig-point (point)))
         (back-to-indentation)
         (when (= orig-point (point))
           (move-beginning-of-line 1))))

     ;; remap C-a to `smarter-move-beginning-of-line'
     (global-set-key [remap move-beginning-of-line]
                     'smarter-move-beginning-of-line)
   #+END_SRC
* Tangle on save
  When opening this file for the first time the following warning is shown:
  "The local variables list in init.org contains values that may not be safe (*)".

  - Press 'y' to continue.
  - Next run `org-babel-tangle` (C-c C-v t) to create an init.el file.
  - Restart emacs or use 'C-x load-file <enter> init.el'
  - The next time this warning is shown press '!' to prevent future warnings.

  #+BEGIN_SRC emacs-lisp :tangle no
    ;; Local Variables:
    ;; eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
    ;; End:
  #+END_SRC
